// Mocks generated by Mockito 5.4.6 from annotations
// in oss_iot_control_applicaton/test/notifications_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i12;
import 'dart:typed_data' as _i14;

import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i3;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i5;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i7;
import 'package:flutter_local_notifications/src/platform_flutter_local_notifications.dart'
    as _i15;
import 'package:flutter_local_notifications/src/platform_specifics/android/enums.dart'
    as _i18;
import 'package:flutter_local_notifications/src/platform_specifics/android/initialization_settings.dart'
    as _i16;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel.dart'
    as _i20;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel_group.dart'
    as _i19;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_details.dart'
    as _i17;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i9;
import 'package:flutter_local_notifications/src/platform_specifics/android/styles/messaging_style_information.dart'
    as _i21;
import 'package:flutter_local_notifications/src/platform_specifics/darwin/initialization_settings.dart'
    as _i22;
import 'package:flutter_local_notifications/src/platform_specifics/darwin/notification_details.dart'
    as _i24;
import 'package:flutter_local_notifications/src/platform_specifics/darwin/notification_enabled_options.dart'
    as _i23;
import 'package:flutter_local_notifications/src/types.dart' as _i10;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i6;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:oss_iot_control_applicaton/session.dart' as _i11;
import 'package:timezone/timezone.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i3.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool?> initialize(
    _i5.InitializationSettings? initializationSettings, {
    _i6.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i6.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<_i6.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i4.Future<_i6.NotificationAppLaunchDetails?>.value(),
          )
          as _i4.Future<_i6.NotificationAppLaunchDetails?>);

  @override
  _i4.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i7.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body, notificationDetails],
              {#payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i8.TZDateTime? scheduledDate,
    _i7.NotificationDetails? notificationDetails, {
    required _i9.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i10.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #androidScheduleMode: androidScheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i6.RepeatInterval? repeatInterval,
    _i7.NotificationDetails? notificationDetails, {
    required _i9.AndroidScheduleMode? androidScheduleMode,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval, notificationDetails],
              {#androidScheduleMode: androidScheduleMode, #payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i7.NotificationDetails? notificationDetails, {
    _i9.AndroidScheduleMode? androidScheduleMode =
        _i9.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShowWithDuration,
              [id, title, body, repeatDurationInterval, notificationDetails],
              {#androidScheduleMode: androidScheduleMode, #payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i4.Future<List<_i6.PendingNotificationRequest>>.value(
              <_i6.PendingNotificationRequest>[],
            ),
          )
          as _i4.Future<List<_i6.PendingNotificationRequest>>);

  @override
  _i4.Future<List<_i6.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i4.Future<List<_i6.ActiveNotification>>.value(
              <_i6.ActiveNotification>[],
            ),
          )
          as _i4.Future<List<_i6.ActiveNotification>>);
}

/// A class which mocks [SessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionManager extends _i1.Mock implements _i11.SessionManager {
  MockSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> renewSession() =>
      (super.noSuchMethod(
            Invocation.method(#renewSession, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void configure({
    required String? sessionToken,
    required String? ip,
    required String? port,
  }) => super.noSuchMethod(
    Invocation.method(#configure, [], {
      #sessionToken: sessionToken,
      #ip: ip,
      #port: port,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i4.Future<String>.value(
              _i13.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i4.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
          )
          as _i4.Future<_i14.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i4.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AndroidFlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i15.AndroidFlutterLocalNotificationsPlugin {
  MockAndroidFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> initialize(
    _i16.AndroidInitializationSettings? initializationSettings, {
    _i6.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i6.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool?> requestExactAlarmsPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestExactAlarmsPermission, []),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<bool?> requestFullScreenIntentPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestFullScreenIntentPermission, []),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<bool?> requestNotificationsPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestNotificationsPermission, []),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<bool?> requestNotificationPolicyAccess() =>
      (super.noSuchMethod(
            Invocation.method(#requestNotificationPolicyAccess, []),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<bool?> hasNotificationPolicyAccess() =>
      (super.noSuchMethod(
            Invocation.method(#hasNotificationPolicyAccess, []),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i8.TZDateTime? scheduledDate,
    _i17.AndroidNotificationDetails? notificationDetails, {
    required _i9.AndroidScheduleMode? scheduleMode,
    String? payload,
    _i10.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #scheduleMode: scheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> startForegroundService(
    int? id,
    String? title,
    String? body, {
    _i17.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i18.AndroidServiceStartType? startType =
        _i18.AndroidServiceStartType.startSticky,
    Set<_i18.AndroidServiceForegroundType>? foregroundServiceTypes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #startForegroundService,
              [id, title, body],
              {
                #notificationDetails: notificationDetails,
                #payload: payload,
                #startType: startType,
                #foregroundServiceTypes: foregroundServiceTypes,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopForegroundService() =>
      (super.noSuchMethod(
            Invocation.method(#stopForegroundService, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> show(
    int? id,
    String? title,
    String? body, {
    _i17.AndroidNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body],
              {#notificationDetails: notificationDetails, #payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i6.RepeatInterval? repeatInterval, {
    _i17.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i9.AndroidScheduleMode? scheduleMode = _i9.AndroidScheduleMode.exact,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval],
              {
                #notificationDetails: notificationDetails,
                #payload: payload,
                #scheduleMode: scheduleMode,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval, {
    _i17.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i9.AndroidScheduleMode? scheduleMode = _i9.AndroidScheduleMode.exact,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShowWithDuration,
              [id, title, body, repeatDurationInterval],
              {
                #notificationDetails: notificationDetails,
                #payload: payload,
                #scheduleMode: scheduleMode,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createNotificationChannelGroup(
    _i19.AndroidNotificationChannelGroup? notificationChannelGroup,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createNotificationChannelGroup, [
              notificationChannelGroup,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteNotificationChannelGroup(String? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotificationChannelGroup, [groupId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createNotificationChannel(
    _i20.AndroidNotificationChannel? notificationChannel,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createNotificationChannel, [
              notificationChannel,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteNotificationChannel(String? channelId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotificationChannel, [channelId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i21.MessagingStyleInformation?>
  getActiveNotificationMessagingStyle(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(
              #getActiveNotificationMessagingStyle,
              [id],
              {#tag: tag},
            ),
            returnValue: _i4.Future<_i21.MessagingStyleInformation?>.value(),
          )
          as _i4.Future<_i21.MessagingStyleInformation?>);

  @override
  _i4.Future<List<_i20.AndroidNotificationChannel>?>
  getNotificationChannels() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationChannels, []),
            returnValue:
                _i4.Future<List<_i20.AndroidNotificationChannel>?>.value(),
          )
          as _i4.Future<List<_i20.AndroidNotificationChannel>?>);

  @override
  _i4.Future<bool?> areNotificationsEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#areNotificationsEnabled, []),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<bool?> canScheduleExactNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#canScheduleExactNotifications, []),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i6.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i4.Future<_i6.NotificationAppLaunchDetails?>.value(),
          )
          as _i4.Future<_i6.NotificationAppLaunchDetails?>);

  @override
  _i4.Future<List<_i6.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i4.Future<List<_i6.PendingNotificationRequest>>.value(
              <_i6.PendingNotificationRequest>[],
            ),
          )
          as _i4.Future<List<_i6.PendingNotificationRequest>>);

  @override
  _i4.Future<List<_i6.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i4.Future<List<_i6.ActiveNotification>>.value(
              <_i6.ActiveNotification>[],
            ),
          )
          as _i4.Future<List<_i6.ActiveNotification>>);
}

/// A class which mocks [IOSFlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i15.IOSFlutterLocalNotificationsPlugin {
  MockIOSFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool?> initialize(
    _i22.DarwinInitializationSettings? initializationSettings, {
    _i6.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i6.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<bool?> requestPermissions({
    bool? sound = false,
    bool? alert = false,
    bool? badge = false,
    bool? provisional = false,
    bool? critical = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, [], {
              #sound: sound,
              #alert: alert,
              #badge: badge,
              #provisional: provisional,
              #critical: critical,
            }),
            returnValue: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<_i23.NotificationsEnabledOptions?> checkPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#checkPermissions, []),
            returnValue: _i4.Future<_i23.NotificationsEnabledOptions?>.value(),
          )
          as _i4.Future<_i23.NotificationsEnabledOptions?>);

  @override
  _i4.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i8.TZDateTime? scheduledDate,
    _i24.DarwinNotificationDetails? notificationDetails, {
    String? payload,
    _i10.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> show(
    int? id,
    String? title,
    String? body, {
    _i24.DarwinNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body],
              {#notificationDetails: notificationDetails, #payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i6.RepeatInterval? repeatInterval, {
    _i24.DarwinNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval],
              {#notificationDetails: notificationDetails, #payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval, {
    _i24.DarwinNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShowWithDuration,
              [id, title, body, repeatDurationInterval],
              {#notificationDetails: notificationDetails, #payload: payload},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancel(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i6.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i4.Future<_i6.NotificationAppLaunchDetails?>.value(),
          )
          as _i4.Future<_i6.NotificationAppLaunchDetails?>);

  @override
  _i4.Future<List<_i6.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i4.Future<List<_i6.PendingNotificationRequest>>.value(
              <_i6.PendingNotificationRequest>[],
            ),
          )
          as _i4.Future<List<_i6.PendingNotificationRequest>>);

  @override
  _i4.Future<List<_i6.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i4.Future<List<_i6.ActiveNotification>>.value(
              <_i6.ActiveNotification>[],
            ),
          )
          as _i4.Future<List<_i6.ActiveNotification>>);
}
